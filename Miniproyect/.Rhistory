div(class = 'notbusy',
img(src = src, height = height, width = width, alt = alt))
)
)
}
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
getwd()
runApp('R/shny/Miniproyect')
library(qcc)
#Lectura de datos
datosmuestras<-read.csv(file = "Diametros.csv",sep = ";")
datosdefectos<-read.csv("Datos Defectos.csv")
#Ajuste datos para gráficas
datosmuestras<-datosmuestras[,-1]
Pareto_defect<-datosdefectos[,-3] ##Datos Gráfico pareto 1
Pareto_defect2<-Pareto_defect$Cantidad
names(Pareto_defect2)<-Pareto_defect$Defectos
pareto_ipp<-datosdefectos[,-2] ##Datos Gráfico pareto 2
pareto_ipp2<-pareto_ipp$IPP
names(pareto_ipp2)<-pareto_ipp$Defectos
#Carta de rangos:
rangos<-qcc(datosmuestras,type = "R")
#Carta de medias:
medias<-qcc(datosmuestras,type = "xbar")
#Diagrama de pareto número de defectos
Pareto1<-pareto.chart(Pareto_defect2)
#Diagrama de pareto con IPP
Pareto1<-pareto.chart(pareto_ipp2)
## Gráfico Six Sigma
library(SixSigma)
effect <- "Abrazaderas defectuosas"
causes.gr <- c("Mano de obra", "Maquinaria", "Medio ambiente", "Materia prima",
"Método", "Medición")
causes <- vector(mode = "list", length = length(causes.gr))
causes[1] <- list(c("Fatiga", "Falta de capacitación", "Incorrecto uso de los EPP"))
causes[2] <- list(c("Mantenimiento incorrecto", "Cortes imprecisos en la cortadora","Punzonados imprecisos"))
causes[3] <- list(c("Insuficientes iluminarias", "Altas temperaturas","Ruidos de las máquinas"))
causes[4] <- list(c("Tornillos/tuercas defectuosos", "Incorrecta implementación del galvanizado", "Láminas de acero mal cortadas"))
causes[5] <- list(c("Procedimiento de medición inadecuado", "Ausencia de toma de tiempos","Trayectos largos(incorrecto layout)"))
causes[6] <- list(c("Medida incorrecta de diámetros", "T incorrecta de galvanizado","Largos tiempos de producción"))
ss.ceDiag(effect, causes.gr, causes, sub = "Herrajes Andina SAS")
getwd()
library(qcc)
#Lectura de datos
datosmuestras<-read.csv(file = "Diametros.csv",sep = ";")
datosdefectos<-read.csv("Datos Defectos.csv")
#Ajuste datos para gráficas
datosmuestras<-datosmuestras[,-1]
Pareto_defect<-datosdefectos[,-3] ##Datos Gráfico pareto 1
Pareto_defect2<-Pareto_defect$Cantidad
names(Pareto_defect2)<-Pareto_defect$Defectos
pareto_ipp<-datosdefectos[,-2] ##Datos Gráfico pareto 2
pareto_ipp2<-pareto_ipp$IPP
names(pareto_ipp2)<-pareto_ipp$Defectos
#Carta de rangos:
rangos<-qcc(datosmuestras,type = "R")
#Carta de medias:
medias<-qcc(datosmuestras,type = "xbar")
#Diagrama de pareto número de defectos
Pareto1<-pareto.chart(Pareto_defect2)
#Diagrama de pareto con IPP
Pareto1<-pareto.chart(pareto_ipp2)
## Gráfico Six Sigma
library(SixSigma)
effect <- "Abrazaderas defectuosas"
causes.gr <- c("Mano de obra", "Maquinaria", "Medio ambiente", "Materia prima",
"Método", "Medición")
causes <- vector(mode = "list", length = length(causes.gr))
causes[1] <- list(c("Fatiga", "Falta de capacitación", "Incorrecto uso de los EPP"))
causes[2] <- list(c("Mantenimiento incorrecto", "Cortes imprecisos en la cortadora","Punzonados imprecisos"))
causes[3] <- list(c("Insuficientes iluminarias", "Altas temperaturas","Ruidos de las máquinas"))
causes[4] <- list(c("Tornillos/tuercas defectuosos", "Incorrecta implementación del galvanizado", "Láminas de acero mal cortadas"))
causes[5] <- list(c("Procedimiento de medición inadecuado", "Ausencia de toma de tiempos","Trayectos largos(incorrecto layout)"))
causes[6] <- list(c("Medida incorrecta de diámetros", "T incorrecta de galvanizado","Largos tiempos de producción"))
ss.ceDiag(effect, causes.gr, causes, sub = "Herrajes Andina SAS")
library(SixSigma)
remove.packages("SixSigma", lib="~/R/win-library/4.0")
install.packages("SixSigma")
library(SixSigma)
install.packages("testthat")
library(SixSigma)
library(qcc)
#Lectura de datos
datosmuestras<-read.csv(file = "Diametros.csv",sep = ";")
datosdefectos<-read.csv("Datos Defectos.csv")
#Ajuste datos para gráficas
datosmuestras<-datosmuestras[,-1]
Pareto_defect<-datosdefectos[,-3] ##Datos Gráfico pareto 1
Pareto_defect2<-Pareto_defect$Cantidad
names(Pareto_defect2)<-Pareto_defect$Defectos
pareto_ipp<-datosdefectos[,-2] ##Datos Gráfico pareto 2
pareto_ipp2<-pareto_ipp$IPP
names(pareto_ipp2)<-pareto_ipp$Defectos
#Carta de rangos:
rangos<-qcc(datosmuestras,type = "R")
#Carta de medias:
medias<-qcc(datosmuestras,type = "xbar")
#Diagrama de pareto número de defectos
Pareto1<-pareto.chart(Pareto_defect2)
#Diagrama de pareto con IPP
Pareto1<-pareto.chart(pareto_ipp2)
## Gráfico Six Sigma
library(SixSigma)
effect <- "Abrazaderas defectuosas"
causes.gr <- c("Mano de obra", "Maquinaria", "Medio ambiente", "Materia prima",
"Método", "Medición")
causes <- vector(mode = "list", length = length(causes.gr))
causes[1] <- list(c("Fatiga", "Falta de capacitación", "Incorrecto uso de los EPP"))
causes[2] <- list(c("Mantenimiento incorrecto", "Cortes imprecisos en la cortadora","Punzonados imprecisos"))
causes[3] <- list(c("Insuficientes iluminarias", "Altas temperaturas","Ruidos de las máquinas"))
causes[4] <- list(c("Tornillos/tuercas defectuosos", "Incorrecta implementación del galvanizado", "Láminas de acero mal cortadas"))
causes[5] <- list(c("Procedimiento de medición inadecuado", "Ausencia de toma de tiempos","Trayectos largos(incorrecto layout)"))
causes[6] <- list(c("Medida incorrecta de diámetros", "T incorrecta de galvanizado","Largos tiempos de producción"))
ss.ceDiag(effect, causes.gr, causes, sub = "Herrajes Andina SAS")
#Carta de rangos:
rangos<-qcc(datosmuestras,type = "R")
class(rangos)
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
rangos$sizes
rangos$type
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
#Carta de rangos:
rangos<-qcc(datosmuestras,type = "R")
r <- plot(rangos)
r
#Carta de rangos:
rangos<-qcc(datosmuestras,type = "R")
r <- plot(rangos)
jpeg(rangos)
View(rangos)
View(rangos)
rangos[["type"]]
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
#Lectura de datos
datosmuestras<-read.csv(file = "Diametros.csv",sep = ";")
datosdefectos<-read.csv("Datos Defectos.csv")
#Ajuste datos para gráficas
datosmuestras<-datosmuestras[,-1]
Pareto_defect<-datosdefectos[,-3] ##Datos Gráfico pareto 1
Pareto_defect2<-Pareto_defect$Cantidad
names(Pareto_defect2)<-Pareto_defect$Defectos
pareto_ipp<-datosdefectos[,-2] ##Datos Gráfico pareto 2
pareto_ipp2<-pareto_ipp$IPP
names(pareto_ipp2)<-pareto_ipp$Defectos
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
#Carta de rangos:
rangos<-plot.qcc(datosmuestras,type = "R")
r <- plot.qcc(rangos)
class(r)
r <- jpeg(plot.qcc(rangos))
r <- plot(rangos, chart.all = FALSE)
r
r <- plot.qqc(rangos, chart.all = FALSE)
r <- plot.qcc(rangos, chart.all = FALSE)
class(r)
as(r,plot)
as(r,Plot)
as(r,"Plot")
effect <- "Abrazaderas defectuosas"
causes.gr <- c("Mano de obra", "Maquinaria", "Medio ambiente", "Materia prima",
"Método", "Medición")
causes <- vector(mode = "list", length = length(causes.gr))
causes[1] <- list(c("Fatiga", "Falta de capacitación", "Incorrecto uso de los EPP"))
causes[2] <- list(c("Mantenimiento incorrecto", "Cortes imprecisos en la cortadora","Punzonados imprecisos"))
causes[3] <- list(c("Insuficientes iluminarias", "Altas temperaturas","Ruidos de las máquinas"))
causes[4] <- list(c("Tornillos/tuercas defectuosos", "Incorrecta implementación del galvanizado", "Láminas de acero mal cortadas"))
causes[5] <- list(c("Procedimiento de medición inadecuado", "Ausencia de toma de tiempos","Trayectos largos(incorrecto layout)"))
causes[6] <- list(c("Medida incorrecta de diámetros", "T incorrecta de galvanizado","Largos tiempos de producción"))
ss.ceDiag(effect, causes.gr, causes, sub = "Herrajes Andina SAS")
causes.gr <- c("Mano de obra", "Maquinaria", "Medio ambiente", "Materia prima",
"Método", "Medición")
class(causes.gr)
class(effect)
a <- ss.ceDiag(effect, causes.gr, causes, sub = "Herrajes Andina SAS")
a <- ss.ceDiag(effect, causes.gr, causes, sub = "Herrajes Andina SAS")
class(a)
a <- plot(a)
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
datos=read.csv(file = "DatosDist.csv", sep=";")
getwd
getwd()
datos=read.csv(file = "R/shny/Miniproyect/DatosDist.csv", sep=";")
datos
datos[-1,-1]
datos=read.csv(file = "R/shny/Miniproyect/DatosDist.csv", sep=";")
datos
SD = 1
OL = 1
REC = 1
BE = 1
EP = 1
BA = 1
RB = 1
SI = 1
vector(SD,OL,REC,BE,EP,BA,RB,SI)
vector <- c(SD,OL,REC,BE,EP,BA,RB,SI)
datos
datos[-0,-0]
datos[-NA,-NA]
datos[-0,-0]
datos[-1,-1]
mat <- matrix(c(0,0,0,1,0,3,4,5), nrow=4)
mat
rows <- unique(which(mat == 0, arr.ind = TRUE)[, 1])
rows
#will give you the indices of columns
cols <- unique(which(mat == 0, arr.ind = TRUE)[, 2])
cols
#then you can do whatever you want
#remove rows
mat[-rows, ]
View(datos)
datos[,1] <- vector
View(datos)
View(datos)
datos[1,] <- vector
View(datos)
SI = 2
OL = 2
vector <- c(SD,OL,REC,BE,EP,BA,RB,SI)
datos[1,] <- vector
View(datos)
#will give you the indices of columns
cols <- unique(which(mat == 2, arr.ind = TRUE)[, 2])
cols
#will give you the indices of columns
cols <- unique(which(mat == 2, arr.ind = TRUE))
cols
cols <- unique(which(mat == 2, arr.ind = TRUE)[, 8])
datos=read.csv(file = "R/shny/Miniproyect/DatosDist.csv", sep=";")
SD = 1
OL = 2
REC = 3
BE = NA
EP = 5
BA = 6
RB = NA
SI = 8
vector <- c(SD,OL,REC,BE,EP,BA,RB,SI)
data[-vector,-vector]
data[-c(1,2),]
vector <- c("OLaya", "El recreo")
View(datos)
datos[,-vector]
datos[,-c("Olaya", "El recreo")]
datos[,-1]
datos=read.csv(file = "R/shny/Miniproyect/DatosDist.csv", sep=";")
datos[-'Olaya']
datos[,-'Olaya']
datos[,-0]
f <- datos[,-0]
View(f)
datos=read.csv(file = "R/shny/Miniproyect/DatosDist.csv", sep=";")
colnames(datos) <- row.names(datos)
View(datos)
View(datos)
datos=read.csv(file = "R/shny/Miniproyect/DatosDist.csv", sep=";")
rownames(datos)=colnames(datos)
View(datos)
datos(-Olaya)
datos(-'Olaya')
install.packages("readxl")
datos=read_excel("R/shny/Miniproyect/DatosDistex.xlsx")
datos=read.csv(file = "R/shny/Miniproyect/DatosDist.csv", sep=";")
rownames(datos)=colnames(datos)
View(datos)
datos["Olaya","Olaya"]
datos[-"Olaya",-"Olaya"]
df = subset(datos, select = -c("Santo.domingo") )
df = subset(datos, select = -c("Olaya"))
df = datos[,!(names(datos) %in% c("Olaya"))]
View(df)
df = datos[!(names(datos) %in% c("Olaya")),!(names(datos) %in% c("Olaya"))]
View(df)
View(df)
View(datos)
df = datos[!(names(datos) %in% c("Santo.Domingo")),!(names(datos) %in% c("Santo.Domingo"))]
View(df)
shiny::runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
Pareto1<-pareto.chart(Pareto_defect2)
library(qcc)
#Lectura de datos
datosmuestras<-read.csv(file = "Diametros.csv",sep = ";")
datosdefectos<-read.csv("Datos Defectos.csv")
#Ajuste datos para gráficas
datosmuestras<-datosmuestras[,-1]
Pareto_defect<-datosdefectos[,-3] ##Datos Gráfico pareto 1
Pareto_defect2<-Pareto_defect$Cantidad
names(Pareto_defect2)<-Pareto_defect$Defectos
pareto_ipp<-datosdefectos[,-2] ##Datos Gráfico pareto 2
pareto_ipp2<-pareto_ipp$IPP
names(pareto_ipp2)<-pareto_ipp$Defectos
#Diagrama de pareto número de defectos
Pareto1<-pareto.chart(Pareto_defect2)
class(Pareto1)
runApp('R/shny/Miniproyect')
View(Pareto_defect)
View(pareto_ipp)
runApp('R/shny/Miniproyect')
runApp('C:/Users/camil/Downloads/ge')
runApp('C:/Users/camil/Downloads/ge')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
icon("control",class="fal fa-chart-line-down")
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
datos1 <- read.csv("datoscartas.csv", sep=";")
attach(datos1)
#----Carta de rangos-----
a <- ggplot(datos1, aes(x=K, y=RANGO )) +
geom_line(colour="red")  +
geom_point( size=2, shape=20, fill="white", colour="red") +
geom_hline(yintercept=9.93984, colour="blue") +
geom_hline(yintercept=4.96, colour="orange", linetype="dashed") +
geom_hline(yintercept=0, colour="green") +#Linea horizontal cuando y es igual a 0
theme_minimal()+
labs(x="NÃºmero de observaciones",y="Rango")+
ggtitle('Carta de rangos')+
theme(plot.title = element_text(hjust=0.5))
a
ggplotly(a)
library(ggplot2)
library(plotly)
library(grid)
datos1 <- read.csv("datoscartas.csv", sep=";")
attach(datos1)
getwd()
datos1 <- read.csv("datoscartas.csv", sep=";")
attach(datos1)
a <- ggplot(datos1, aes(x=K, y=RANGO )) +
geom_line(colour="red")  +
geom_point( size=2, shape=20, fill="white", colour="red") +
geom_hline(yintercept=9.93984, colour="blue") +
geom_hline(yintercept=4.96, colour="orange", linetype="dashed") +
geom_hline(yintercept=0, colour="green") +#Linea horizontal cuando y es igual a 0
theme_minimal()+
labs(x="NÃºmero de observaciones",y="Rango")+
ggtitle('Carta de rangos')+
theme(plot.title = element_text(hjust=0.5))
a
ggplotly(a)
install.packages("crosstalk")
a <- ggplot(datos1, aes(x=K, y=RANGO )) +
geom_line(colour="red")  +
geom_point( size=2, shape=20, fill="white", colour="red") +
geom_hline(yintercept=9.93984, colour="blue") +
geom_hline(yintercept=4.96, colour="orange", linetype="dashed") +
geom_hline(yintercept=0, colour="green") +#Linea horizontal cuando y es igual a 0
theme_minimal()+
labs(x="NÃºmero de observaciones",y="Rango")+
ggtitle('Carta de rangos')+
theme(plot.title = element_text(hjust=0.5))
a
ggplotly(a)
b <- ggplot(datos1, aes(x=K, y=MEDIA )) +
geom_line(colour="red")  +
geom_point( size=2, shape=20, fill="white", colour="red") +
geom_hline(yintercept=180.144,colour="orange", linetype="dashed") +
geom_hline(yintercept=183.0049, colour="blue") +
geom_hline(yintercept=177.2831, colour="green") +#Linea horizontal cuando y es igual a 0
theme_minimal()+
labs(x="NÃºmero de observaciones",y="Media")+
ggtitle('Carta de medias')+
theme(plot.title = element_text(hjust=0.5))
b
ggplotly(b)
df <- data.frame(x=c(178,179,180,181,182),
y=c(-1,-1,-1,-1,-1))
datos2 <- read.csv("comportamientodatos.csv", sep=";")
attach(datos2)
colnames(datos2)<-c("Diametro","Frecuencia")
c <- ggplot(data=datos2, aes(x=Diametro, y=Frecuencia)) +
geom_bar(stat="identity", position="stack",colour="black",
fill="lightblue")+
geom_vline(xintercept=180, colour="red",linetype="dashed",
size=1) +
theme_minimal()+
labs(x="DiÃ¡metros",y="Frecuencia")+
ggtitle('Comportamiento de los datos')+
theme(plot.title = element_text(hjust=0.5))+
geom_line(data=df,aes(x,y))+
annotate("text", x=c(178,182,180), y=-2, label= c("EI=178mm","ES=182mm","VN"))+
geom_vline(xintercept=178, colour="red",linetype="dashed",size=0.5)+
geom_vline(xintercept=182, colour="red",linetype="dashed",size=0.5)
c
ggplotly(c)
datos<-read.csv("Datos Defectos.csv")
numdefect<-datos[,-3]
numdefect$Defectos<-factor(numdefect$Defectos,levels = numdefect$Defectos)
numdefect$cum<-cumsum(numdefect$Cantidad)
numdefect.sum<-sum(numdefect$Cantidad)
numdefect$cum_perc<-50*numdefect$cum/numdefect.sum
pareto1<-ggplot(numdefect)+geom_bar(aes(x=Defectos,y=Cantidad,fill=Defectos),stat = 'identity')+
theme_minimal()+theme(axis.text.x = element_blank())+geom_point(aes(x=Defectos,y=cum_perc),size=1)+
geom_path(aes(x=Defectos,y=cum_perc,group=1))+scale_y_continuous("Cantidad",sec.axis = sec_axis(~c(0,100),name="Porcentaje"))+
scale_fill_brewer(palette="Dark2")
ggplotly(pareto1)
pareto1<-ggplot(numdefect)+geom_bar(aes(x=Defectos,y=Cantidad,fill=Defectos, show.legend = FALSE),stat = 'identity')+
theme_minimal()+theme(axis.text.x = element_blank())+geom_point(aes(x=Defectos,y=cum_perc),size=1)+
geom_path(aes(x=Defectos,y=cum_perc,group=1))+scale_y_continuous("Cantidad",sec.axis = sec_axis(~c(0,100),name="Porcentaje"))+
scale_fill_brewer(palette="Dark2")
ggplotly(pareto1)
pareto1<-ggplot(numdefect)+
geom_bar(aes(x=Defectos,y=Cantidad,fill=Defectos),stat = 'identity', show.legend = FALSE)+
theme_minimal()+theme(axis.text.x = element_blank())+geom_point(aes(x=Defectos,y=cum_perc),size=1)+
geom_path(aes(x=Defectos,y=cum_perc,group=1))+scale_y_continuous("Cantidad",sec.axis = sec_axis(~c(0,100),name="Porcentaje"))+
scale_fill_brewer(palette="Dark2")
ggplotly(pareto1)
pareto1<-ggplot(numdefect)+
geom_bar(aes(x=Defectos,y=Cantidad,fill=Defectos),stat = 'identity', show.legend = FALSE)+
theme_minimal()+theme(axis.text.x = element_blank())+geom_point(aes(x=Defectos,y=cum_perc),size=1, show.legend = FALSE)+
geom_path(aes(x=Defectos,y=cum_perc,group=1))+scale_y_continuous("Cantidad",sec.axis = sec_axis(~c(0,100),name="Porcentaje"))+
scale_fill_brewer(palette="Dark2")
ggplotly(pareto1)
pareto1<-ggplot(numdefect)+
geom_bar(aes(x=Defectos,y=Cantidad,fill=Defectos),stat = 'identity', show.legend = FALSE)+
theme_minimal()+theme(axis.text.x = element_blank())+geom_point(aes(x=Defectos,y=cum_perc),size=1, show.legend = FALSE)+
geom_path(aes(x=Defectos,y=cum_perc,group=1), show.legend = FALSE)+scale_y_continuous("Cantidad",sec.axis = sec_axis(~c(0,100),name="Porcentaje"))+
scale_fill_brewer(palette="Dark2")
ggplotly(pareto1)
pareto1<-ggplot(numdefect, show.legend = FALSE)+
geom_bar(aes(x=Defectos,y=Cantidad,fill=Defectos),stat = 'identity', show.legend = FALSE)+
theme_minimal()+theme(axis.text.x = element_blank())+geom_point(aes(x=Defectos,y=cum_perc),size=1, show.legend = FALSE)+
geom_path(aes(x=Defectos,y=cum_perc,group=1), show.legend = FALSE)+scale_y_continuous("Cantidad",sec.axis = sec_axis(~c(0,100),name="Porcentaje"))+
scale_fill_brewer(palette="Dark2")
ggplotly(pareto1)
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
##################################CONTROL############################################################
datos1 <- read.csv("datoscartas.csv", sep=";")
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
shiny::runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
runApp('R/shny/Miniproyect')
library(plotly)
runApp('R/shny/Miniproyect')
shiny::runApp('R/shny/Miniproyect')
library(plotly)
runApp('R/shny/Miniproyect')
